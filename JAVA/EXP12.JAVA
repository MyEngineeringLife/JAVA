// To implement Multithreading
// a.Write a java program to print Table of Five, Seven and Thirteen using Multithreading (Use Thread class 
// for the implementation).Alsoprint the total time taken by each thread for the execution.

class Multiply extends Thread 
{ 
int n; 
 Multiply(int num) 
 { 
n = num; 
 } 
 public void run() 
 { 
 long startTime = 
System.nanoTime(); try 
 { 
 for(int i=1;i<11;i++) 
 System.out.println(n + " * " + i + " = " + n*i); 
 } 
 catch (Exception e) { 
 System.out.println(e); 
 } 
 System.out.println("Total execution time in millis: " + (System.nanoTime() -
startTime)/1000000); 
 } 
} class Exp12a { public static void main(String[] args) 
 { 
 Multiply five = new Multiply(5); 
 Multiply seven = new Multiply(7); 
 Multiply thirteen = new Multiply(13); 
 five.start(); 
 seven.start(); 
 thirteen.start(); 
 } 
} 

// b.Write a multithreaded program that outputs prime numbers. This program should work as follows: The 
// user will run the program and will enter a number on the commandline. The 
// program will then create a separate thread that outputs all the prime numbers less than or equal to the number 
// entered by the user.
import java.util.Scanner; 
class Prime extends Thread 
{ 
 public boolean isPrime(int x) 
 { 
 for(int i=2; i<=x/2; i++) 
if(x%i==0) 
return false; return 
true; 
 } 
 
 public void run() 
 
{ 
 
try 
 { 
 Scanner sc = new 
Scanner(System.in); 
System.out.println("Enter a number"); 
int n = sc.nextInt(); for(int 
i=2;i<=n;i++) if(isPrime(i)) 
 System.out.println(i + " is prime"); 
 } 
 catch (Exception e) { 
 System.out.println(e); 
 } 
 } 
} 
 
class Exp12b 
{ 
 public static void main(String[] args) 
 { 
 
 Prime p = new Prime(); 
 p.start(); 
 } 
} 


// c.Write a multithreaded program that calculates various statistical values for a list of numbers. This program 
// should read values in an array and will then create three separate worker threads.One thread will determine the 
// average of the numbers, the second will determine the maximum value, and the third will determine the minimum 
// value. For example, suppose your program is passed the integers9081 78 95 79 72 85The program will 
// reportThe average value is 82The minimum value is 72The maximum value is 95The variables representing the 
// average, minimum, and maximum values will be stored globally. The worker threads will set these values, and 
// the parent thread will output the values once the workers have exited
import java.util.Scanner; 
class Avg extends Thread 
{ 
int arr[]; 
 Avg(int[] a) 
 { arr = a; 
 } 
 public void run() 
 { 
 int 
sum = 0; 
try 
 { 
 for(int i=0;i<arr.length;i++) 
sum+=arr[i]; System.out.println("The 
average value is " + sum/arr.length); 
 } 
 catch (Exception e) { 
 System.out.println(e); 
 } 
 } 
} 
 
class Min extends Thread 
{ int arr[]; 
 Min(int[] a) 
 { arr = a; } 
 public void run() 
 { 
 int min = arr[0]; 
 try 
 { 
 for(int i=1;i<arr.length;i++) 
 min = Math.min(min, arr[i]); 
 System.out.println("The minimum value is " + min); } 
 catch (Exception e) { 
 System.out.println(e); 
 } 
 } 
} 
 
class Max extends Thread 
{ 
int arr[]; 
 Max(int[] a) 
 { arr = a; 
 } 
 public void run() 
 { 
 int max = arr[0]; 
 
try 
 { 
 for(int i=1;i<arr.length;i++) 
max = Math.max(max, arr[i]); 
 System.out.println("The minimum value is " + max); 
 } 
 catch (Exception e) { 
 System.out.println(e); 
 } 
 } 
} 
 
class Exp12c 
{ public static void main(String[] args) 
 { 
 Scanner sc = new Scanner(System.in); 
 System.out.println("Enter the number of elements"); 
int n = sc.nextInt(); 
 int arr[] = new int[n]; 
 System.out.println("Enter the 
numbers"); for(int i=0; i<n; i++) 
arr[i] = sc.nextInt(); Avg a = new 
Avg(arr); 
 a.start(); 
 Min mi = new Min(arr); 
mi.start(); 
 Max ma = new Max(arr); 
ma.start(); 
 } 
}
// d.The Fibonacci sequence is the series of numbers 0,1,1,2,3,5,8, ....Formally, it can be expressed 
// as:fib0=0fib1=1fibn=fibn−1+fibn−2Write a multithreaded program that generates the Fibonacci 
// sequence.This program should work as follows: On the command line (optional), the user will enter the number 
// of Fibonacci numbers that the program is to generate. The program will then create a separate thread that will 
// generate the Fibonacci numbers, placing the sequence in data that can be shared by the threads (an array is 
// probably the most convenient data structure). When the thread finishes execution, the parent thread will 
// output the sequencegenerated by the child thread. Because the parent thread cannot begin outputting the 
// Fibonacci sequence until the child thread finishes, the parent thread will have to wait for the child thread to finish.
import java.util.Scanner; 
class Fibo extends Thread 
{ 
 int fiboSeries[]; 
 public void run() 
 
{ 
 
try 
 { 
 Scanner sc = new Scanner(System.in); 
 System.out.println("Enter the number of 
elements"); int n = sc.nextInt(), a = 0, b = 1, c; 
fiboSeries = new int[n]; fiboSeries[0] = a; 
fiboSeries[1] = b; for(int i=2;i<n;i++) 
 { 
c = a+b; 
a = b; b 
= c; 
fiboSeries[i] = c; 
 } 
 } 
 catch (Exception e) { 
 System.out.println(e); 
 } 
 } 
 
 public int[] ret() 
 { return 
fiboSeries; 
 } 
} 
 
class Exp12d 
{ 
 public static void main(String[] args) 
 
{ 
try{ 
 Fibo f = new Fibo(); 
f.start(); 
 f.join(); 
int arr[] = f.ret(); 
 System.out.println("The Fibonacci series is"); 
for(int i=0; i<arr.length; i++) 
 System.out.println(arr[i] + " "); 
 } 
 catch(Exception e){ 
 System.out.println(e); 
 } 
} 
}